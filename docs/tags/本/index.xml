<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>本 on My New Hugo Site</title>
    <link>https://jumperson.github.com/blog/tags/%E6%9C%AC/</link>
    <description>Recent content in 本 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Mar 2019 19:27:59 +0900</lastBuildDate>
    
	<atom:link href="https://jumperson.github.com/blog/tags/%E6%9C%AC/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>読みました-実装パターン</title>
      <link>https://jumperson.github.com/blog/posts/%E8%AA%AD%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F-%E5%AE%9F%E8%A3%85%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/</link>
      <pubDate>Mon, 18 Mar 2019 19:27:59 +0900</pubDate>
      
      <guid>https://jumperson.github.com/blog/posts/%E8%AA%AD%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F-%E5%AE%9F%E8%A3%85%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/</guid>
      <description> 実装パターン | ケント・ベックを借りられたので読みました。
本書では、Javaを前提に以下の設計について記載されていました。
 クラス 状態 振る舞い メソッド コレクション フレームワーク  Java以外でも使える一般的な内容も触れられています。 クラスやメソッドなどの細かい設計判断について書かれている本は少なく、貴重だと感じました。
個人メモ  他の人が読んで理解できるコードの作成方法について書かれた本 コードを通じて自分の意図を伝える 価値  コミュニケーション シンプル 柔軟性  デザインパターンは一般にクラス間の関係のパターン p27 バリューオブジェクトについてよくまとまっている p37 明確性と直接性を犠牲にして柔軟性を実現 p59  </description>
    </item>
    
    <item>
      <title>読みました-実装パターン9章コレクション</title>
      <link>https://jumperson.github.com/blog/posts/%E8%AA%AD%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F-%E5%AE%9F%E8%A3%85%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B39%E7%AB%A0%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3/</link>
      <pubDate>Mon, 18 Mar 2019 19:27:59 +0900</pubDate>
      
      <guid>https://jumperson.github.com/blog/posts/%E8%AA%AD%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F-%E5%AE%9F%E8%A3%85%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B39%E7%AB%A0%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3/</guid>
      <description>実装パターン | ケント・ベックを借りられたので読みました。
その中の9章コレクションにて曖昧に扱っていたコレクションの名称についてまとめられていたので引用します。
 配列：最もシンプルだが、最も柔軟性に乏しいコレクションである。大きさは固定され、シンプルなアクセス用の構文を持ち、高速である。 Iterable：基本的なコレクションのインタフェースである。コレクションを「foreach」文の対象にするだけである。 Collection：要素の追加、削除、存在チェックを可能とする。 List：要素の順序付けられ、コレクション内の位置でアクセスできるコレクション Set：重複のないコレクション SortedSet：重複のない、順序付けられたコレクション Map：要素がキーにしたがって格納及び取得されるコレクション  命名に迷ったときはこちらの定義を参考にしたいと思います。</description>
    </item>
    
    <item>
      <title>読みました-シリコンバレーの日常「サルたちの狂宴」</title>
      <link>https://jumperson.github.com/blog/posts/%E8%AA%AD%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F-%E3%82%B7%E3%83%AA%E3%82%B3%E3%83%B3%E3%83%90%E3%83%AC%E3%83%BC%E3%81%AE%E6%97%A5%E5%B8%B8%E3%82%B5%E3%83%AB%E3%81%9F%E3%81%A1%E3%81%AE%E7%8B%82%E5%AE%B4/</link>
      <pubDate>Wed, 12 Dec 2018 10:42:17 +0900</pubDate>
      
      <guid>https://jumperson.github.com/blog/posts/%E8%AA%AD%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F-%E3%82%B7%E3%83%AA%E3%82%B3%E3%83%B3%E3%83%90%E3%83%AC%E3%83%BC%E3%81%AE%E6%97%A5%E5%B8%B8%E3%82%B5%E3%83%AB%E3%81%9F%E3%81%A1%E3%81%AE%E7%8B%82%E5%AE%B4/</guid>
      <description>シリコンバレーの日常「サルたちの狂宴」 – suadd blog を読みました。
シリコンバレーでスタートアップをやっていた方の書籍で、リアルをぶっちゃけている書籍で、スタートアップに関わる方は必読なようです。 私は、スタートアップに関わってはいませんが、読んでみたいと感じました。</description>
    </item>
    
  </channel>
</rss>